#include<bits/stdc++.h>
using namespace std;
struct stacks
{
    int size;
    int top;
    int *arr;
};
int isEmpty(stacks *ptr)
{
    if(ptr->top==-1)
    {
        return(-1);
    }
    else
    {
        return(0);
    }
}
int isFull(stacks *ptr)
{
    if(ptr->top==ptr->size-1)
    {
        return(-1);
    }
    else
    {
        return(0);
     }
}
void push(stacks *ptr,int val)
{
    if(isFull(ptr))
    {
        cout<<"\n stack overflow";
    }
    else
    {
        ptr->top++;
        ptr->arr[ptr->top]=val;
    }
}
int pop(stacks *ptr)
{
    int val;
    if(isEmpty)
    {
        cout<<"\n stack underflow";
        return(0);
    }
    else
    {
      val=ptr->arr[ptr->top];
      ptr->top--;  
      return(val);
    }
}
int peek(stacks *ptr,int index)
{
    int val;
    if(isEmpty)
    {
        cout<<"\n stack underflow";
        return(-1);
    }
    else
    {
        int pos=ptr->top-index+1;
        if(pos<=0)
        {
            cout<<"\n wrong index";
            return(-1);
        }
        else
        {
            return(ptr->arr[pos]);
        }
    }
}
void peep(stacks *ptr)
{
    if(isEmpty)
    {
        cout<<"\n stack underflow";
        // return(-1);
    }
    else
    {
         for(int i=0;i<ptr->top;i++)
        {
            cout<<ptr->arr[i];
        }
            // return(0
    }
}
int main()
{
    stacks *s;
    s->size=100;
    s->top=-1;
    s->arr=new int[s->size*sizeof(int)];

    // check stack is Empty or Full
    isEmpty(s);


    // pushing data in stack
    push(s,28);
    push(s,56);
    push(s,44);
    push(s,67);
    push(s,99);

    // peeking data from stack
   
    peep(s);

    // peek data from index

    peek(s,3);

    // popping data from stack

    pop(s);
    pop(s);

    // peeking data from stack
   
    peep(s);


    return(0);
}